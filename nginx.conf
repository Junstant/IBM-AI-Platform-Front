user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    include /etc/nginx/conf.d/*.conf;

  server {
    listen 2012 default_server;
    listen [::]:2012 default_server;
    server_name _;

    # Estas directivas ahora aplican a todo el servidor
    root /var/www/html;
    index index.html;

    # Proxy para la API de FastAPI (Docker puerto 8000)
    location /api/fraude/ {
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

         location /predict_single_transaction {
          proxy_pass http://127.0.0.1:8000/predict_single_transaction; # Apunta al endpoint correcto en FastAPI
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }
    # ==========================================================
    # ===== REGLA NUEVA PARA EL PROXY DINÁMICO DEL CHATBOT =====
    # ==========================================================
# Captura URLs como /proxy/8099/completion
location ~ ^/proxy/(\d+)/(.*)$ {
    # 1. Resuelve el problema de CORS y permite streaming
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Habilita el streaming para respuestas del chatbot
    proxy_set_header Connection '';
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_cache off;
    chunked_transfer_encoding on;

    # 2. Redirige la petición usando las partes capturadas de la URL
    #    $1 es el puerto (ej: 8096)
    #    $2 es el resto de la ruta (ej: completion)
    proxy_pass http://127.0.0.1:$1/$2;

    # Headers estándar del proxy
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}
    # ==========================================================
    # ===== PROXY PARA LA API TEXT-TO-SQL (FastAPI en Docker) ====
    # ==========================================================
    location /api/textosql/ {
        # Apunta al puerto 8001 del host, que Docker mapea al 8000 del contenedor
        proxy_pass http://127.0.0.1:8001/;

        # Headers estándar del proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Servir React (ahora hereda el 'root' de arriba)
    location / {
        try_files $uri /index.html;
    }

    # Archivos estáticos cache (ahora hereda el 'root' de arriba)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public";
    }

    # Páginas de error
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }
}
}